import pickle
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build

# GOOGLE SHEETS API
# Determine the scope (access range)
scope = ["https://www.googleapis.com/auth/drive"] # Full, permissive scope to access all of a user's files. Request this scope only when it is strictly necessary.

# Since i'm editing spreadsheets on behalf of myself and not on behalf of an application for other users, I can use the Signed Credentials generated by Google Cloud Console which is stored in your application
service_account_credentials = ServiceAccountCredentials.from_json_keyfile_name(r"./Credentials/credentials.json", scope)

# Create a client object that interacts with Google Sheets API 
client = gspread.authorize(service_account_credentials)

# Get data from Google Sheet
event_dict = client.open("FC Gatineau Schedule").sheet1.get_all_records()


# GOOGLE CALENDAR API
# Load access token created using oauth2_setup.py
access_token = pickle.load(open(r"./Credentials/token.pickle","rb"))

# Create a service object to Interact with Google Calendar API
service = build("calendar","v3", credentials = access_token) 

# Get all calendars from user
calendars = service.calendarList().list().execute() # .list() Returns calendars on the user's calendar list

# Info about the first calendar
# print(calendars["items"][0]) # items refers to a list of calendars that are present on the user's calendar list.

# Getting my calendar ID
my_calendar_id = calendars["items"][0]["id"]
my_calendar_timeZone = calendars["items"][0]["timeZone"]

# Get Calendar Events: Go to Google Calendar API > Events > list > get all the events. We need to pass the Calendar ID 
events = service.events().list(calendarId=my_calendar_id).execute() # ALWAYS execute API requests. Events sub-module, .List() returns events on the specified calendar. Pass my_calendar_id as argument

# It is possible to restrict calendar by getting specific events, timezone, timeMax, timeMin, etc.
events = service.events().list(calendarId=my_calendar_id,orderBy = "startTime",singleEvents = True, timeMin = "2019-07-01T10:00:00-07:00", timeMax = "2019-07-07T23:22:15.000Z", timeZone = "America/Toronto").execute() # Only getting this week's event

# Having a look at my events
# print(events["items"]) # items[] is a list of events on the calendar. Have a look at my first event.

# Print first event 
# print(events["items"][0])


# CREATING GOOGLE CALENDAR EVENTS using event_dict and the insert API from Events ressource which takes the calendar ID and the event (dictionary) you want to add as arguments. https://developers.google.com/calendar/v3/reference/events/insert
# Function that creates event
def create_match_event(summary ,description, start_time, end_time, location, home_team, away_team):
    event = {
        'summary': summary,
        'location': location,
        'description': description,
        'start': {
            'dateTime': start_time,
            'timeZone': my_calendar_timeZone,
        },
        'end': {
            'dateTime': end_time,
            'timeZone': my_calendar_timeZone,
        },
        'reminders': {
            'useDefault': False,
            'overrides': [
                {'method': 'popup', 'minutes': 30}
            ],
        },
    }
    return service.events().insert(calendarId=my_calendar_id, body=event).execute()

for event in event_dict:
  summary = "{} vs {}".format(event["HomeTeam"],event["AwayTeam"])
  description = "Match PLSQ entre {HomeTeam} et {AwayTeam} qui se d√©roule au terrain {location} et aura lieu {date}".format(HomeTeam=event["HomeTeam"],AwayTeam=event["AwayTeam"],location=event["FieldName"],date=event["StartTime"].split("T")[0])
  create_match_event(summary=summary, description=description,location=event["FieldName"], start_time=event["StartTime"], end_time=event["EndTime"], home_team=event["HomeTeam"], away_team=event["AwayTeam"])